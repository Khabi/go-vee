//go:build ignore

package main

import (
	"encoding/json"
	"log"
	"net/http"
	"os"
	"strings"
	"text/template"
	"time"
)

// apiResponse is the response format from inventoryURL
type apiResponse struct {
	Status  int    `json:"status"`
	Message string `json:"message"`
	Data    []struct {
		Name  string `json:"name"`
		Type  int    `json:"type"`
		Items []struct {
			SKU        string `json:"nodeSku"`
			Image      string `json:"nodeUrl"`
			Name       string `json:"nodeName"`
			ProductURL string `json:"mallUrl"`
		} `json:"categoryList"`
	} `json:"data"`
}

func main() {

	// Fetch a list of supported devices from the GoVee API endpoint
	client := &http.Client{Timeout: 10 * time.Second}
	req, err := client.Get("https://app2.govee.com/bff-app/v1/user/guide/device/info?market=US")
	if err != nil {
		log.Fatal(err.Error())
	}
	defer req.Body.Close()

	resp := apiResponse{}
	err = json.NewDecoder(req.Body).Decode(&resp)
	if err != nil {
		log.Fatal(err.Error())
	}
	if resp.Status != http.StatusOK {
		log.Fatalf("invalid response from GoVee API.  Code: '%d', Message: '%s'", resp.Status, resp.Message)
	}

	// Create the Kind Types
	kinds := map[string]string{}
	devices := []map[string]string{}
	for _, item := range resp.Data {
		key := strings.ReplaceAll(strings.Title(item.Name), " ", "")
		kinds[key] = item.Name
		for _, device := range item.Items {
			d := map[string]string{
				"kind":        key,
				"sku":         device.SKU,
				"name":        device.Name,
				"product_url": device.ProductURL,
			}
			devices = append(devices, d)
		}
	}

	data := map[string]interface{}{
		"kinds":   kinds,
		"devices": devices,
	}

	// create catalog.go and parse out the tmeplate.
	f, err := os.Create("catalog.go")
	if err != nil {
		log.Fatal(err.Error())
	}
	defer f.Close()

	t := template.Must(template.New("").Parse(tmpl))
	t.Execute(f, data)
}

var tmpl = `
// Autogenerated by catalog_gen.go.  Do not modify.
package govee

// Kind is a representation of the type of device.  Devices are
// broken into types like "String Lights" or "Strip Lights".
type Kind string

// Spec hosts specific device information.
type Spec struct {
	Kind 		Kind	// device type
	SKU 		string	// device SKU
	Name 		string	// device Name
	ProductURL	string	// url to product page
}

const (
	{{ range $kind, $rep := .kinds -}}
	{{ $kind }} Kind = "{{ $rep }}"
	{{ end }}
)

var catalog = []Spec{
	{{ range .devices -}}
	{ {{ .kind }}, "{{ .sku }}", "{{ .name }}", "{{ .product_url }}" },
	{{ end }}
}

// LookupBySKU searches the catalog for a device
// matching the given SKU.
func LookupBySKU(sku string) *Spec {
	for _, device := range catalog{
		if device.SKU == sku {
			return &device
		}
	}

	return nil
}

// LookupByKind searches the catalog and returns
// all the devices matching it.
func LookupByKind(kind Kind) []*Spec {
	data := []*Spec{}

	for _, device := range catalog {
		if device.Kind == kind {
			data = append(data, &device)
		}
	}

	if len(data) > 0 {
		return data
	}
	return nil
}
`
